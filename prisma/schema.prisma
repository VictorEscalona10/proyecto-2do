// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id        Int        @id @default(autoincrement())
  name      String
  email     String     @unique
  password  String
  role      UserRole   @default(USUARIO)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @default(now())
  orders    Order[]
  reviews   Review[]
}


model Product {
  id           Int         @id @default(autoincrement())
  name         String
  description  String?
  price        Decimal
  imageUrl     String?
  categoryId   Int
  category     Category?   @relation(fields: [categoryId], references: [id])
  stock        Int
  orderDetails OrderDetail[]
  reviews      Review[]
}

model Category {
  id       Int       @id @default(autoincrement())
  name     String     @unique
  products Product[]
}

model Order {
  id           Int     @id @default(autoincrement())
  user         User?           @relation(fields: [userId], references: [id])
  userId       Int?
  orderDate    DateTime        @default(now())
  status       String          @default("Pending")
  total        Decimal
  orderDetails OrderDetail[]
  payments     Payment[]
}

model OrderDetail {
  id             Int       @id @default(autoincrement())
  order          Order     @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId        Int
  product        Product   @relation(fields: [productId], references: [id])
  productId      Int
  quantity       Int
  unitPrice      Decimal
}

model Payment {
  id           Int      @id @default(autoincrement())
  order        Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId      Int
  method       String
  paymentDate  DateTime @default(now())
  status       String   @default("Pending")
}

model Review {
  id           Int        @id @default(autoincrement())
  user         User?      @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId       Int?
  product      Product    @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId    Int
  rating       Int?
  comment      String?
  date         DateTime   @default(now())
}

enum UserRole {
  ADMIN
  USUARIO
}