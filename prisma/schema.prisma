// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  phoneNumber String @unique
  Identification Int @unique
  password  String
  role      UserRole @default(USUARIO)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  orders    Order[]
  reviews   Review[]
  passwordResetTokens PasswordResetToken[]
}

model Product {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  price       Decimal
  imageUrl    String?
  categoryId  Int
  category    Category @relation(fields: [categoryId], references: [id], onDelete: NoAction)
  orderDetails OrderDetail[]
  reviews     Review[]
}

model Category {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  products Product[]
}

model Order {
  id           Int           @id @default(autoincrement())
  user         User?         @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId       Int?
  orderDate    DateTime      @default(now())
  status       Status        @default(PENDING)
  total        Decimal
  orderDetails OrderDetail[]
  payments     Payment[]
}

model OrderDetail {
  id        Int     @id @default(autoincrement())
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId   Int
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  quantity  Int
  unitPrice Decimal
}

model Payment {
  id          Int      @id @default(autoincrement())
  order       Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId     Int
  method      String
  paymentDate DateTime @default(now())
  status      Status   @default(PENDING)
}

model Review {
  id        Int      @id @default(autoincrement())
  user      User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId    Int?
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  rating    Int?
  comment   String?
  date      DateTime @default(now())
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime
  isValid   Boolean  @default(true)
  createdAt DateTime @default(now())

  @@map("password_reset_tokens")
  @@index([userId])
  @@index([expiresAt])
  @@index([isValid])
}

model Chat {
  id        String   @id @default(uuid())
  clientId  String
  adminId   String
  status    String   @default("active")
  createdAt DateTime @default(now())
  
  messages Message[]
}

model Message {
  id        String   @id @default(uuid())
  text      String
  userId    String
  chatId    String
  isAdmin   Boolean  @default(false)
  createdAt DateTime @default(now())

  chat Chat @relation(fields: [chatId], references: [id], onDelete: Cascade)
}

enum UserRole {
  ADMINISTRADOR
  TRABAJADOR
  USUARIO
}

enum Status {
  PENDING
  PROCESSED
  CANCELLED
}